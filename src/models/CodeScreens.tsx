/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 CodeScreens.glb -k -t 
*/

import * as THREE from "three";
import React, { useRef, useEffect } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { useAtom } from "jotai";
import { codeScreenActive } from "../atoms/atoms";
import gsap from "gsap";
import { degToRad } from "three/src/math/MathUtils.js";
import Triangle from "../components/triangle";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh;
    Plane: THREE.Mesh;
    Plane001: THREE.Mesh;
  };
  materials: {};
  animations: GLTFAction[];
};

const CodeScreens = (props: JSX.IntrinsicElements["group"]) => {
  const { nodes, materials } = useGLTF("/CodeScreens.glb") as GLTFResult;
  const groupRef = useRef<THREE.Group>(null);
  const [active, setActive] = useAtom(codeScreenActive);

  useEffect(() => {
    if (!groupRef.current) return;
    if (active == false) {
      gsap.to(groupRef.current.rotation, {
        x: degToRad(0), // 0 degrees in radians
        duration: 1, // 1 second
        ease: "power2.inOut",
      });
    }
    if (active == true) {
      gsap.to(groupRef.current.rotation, {
        x: degToRad(180), // 180 degrees in radians
        duration: 1, // 1 second
        ease: "power2.inOut",
      });
    }
  }, [active]);

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        name="Cylinder"
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        rotation={[-Math.PI, 0, 0]}
        scale={[0.053, 1, 0.053]}
        onClick={() => setActive((prev) => !prev)}
      >
        <mesh
          name="Plane"
          geometry={nodes.Plane.geometry}
          material={nodes.Plane.material}
          position={[18.733, -1.97, -1.819]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[15.762, 15.762, 0.841]}
        >
          <Html
            style={{ userSelect: "none", width: "1080px", height: "1080px" }}
            castShadow
            receiveShadow
            occlude="blending"
            transform
            scale={0.13}
            distanceFactor={5}
            position={[-0.05, 0.1, 0]}
            rotation={[degToRad(90), degToRad(180), 0]}
          >
            {<Triangle></Triangle>}
          </Html>
        </mesh>

        <mesh
          name="Plane001"
          geometry={nodes.Plane001.geometry}
          material={nodes.Plane001.material}
          position={[-18.733, -1.97, -1.819]}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[15.762, 15.762, 0.841]}
        >
          <Html
            style={{ userSelect: "none", width: "1080px", height: "1080px" }}
            castShadow
            receiveShadow
            occlude="blending"
            transform
            scale={0.13}
            distanceFactor={5}
            position={[0.05, 0.1, 0]}
            rotation={[degToRad(90), degToRad(180), 0]}
          >
            {<Triangle></Triangle>}
          </Html>
        </mesh>
      </mesh>
    </group>
  );
};

useGLTF.preload("/CodeScreens.glb");
export default CodeScreens;
