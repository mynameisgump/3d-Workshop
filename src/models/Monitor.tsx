/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 Monitor.glb -k -t 
*/

import * as THREE from "three";
import React, { JSX } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ID4: THREE.Mesh;
    ID4_1: THREE.Mesh;
    ID4_2: THREE.Mesh;
    ID4_3: THREE.Mesh;
    Screen: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    material: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/Monitor.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group name="MonitorBody" position={[0.775, 2.574, -0.335]}>
        <mesh
          name="ID4"
          geometry={nodes.ID4.geometry}
          material={materials["Material.001"]}
        />
        <mesh
          name="ID4_1"
          geometry={nodes.ID4_1.geometry}
          material={materials.material}
        />
        <mesh
          name="ID4_2"
          geometry={nodes.ID4_2.geometry}
          material={materials["Material.002"]}
        />
        <mesh
          name="ID4_3"
          geometry={nodes.ID4_3.geometry}
          material={materials["Material.003"]}
        />
      </group>
      <mesh
        name="Screen"
        geometry={nodes.Screen.geometry}
        material={nodes.Screen.material}
        position={[1.008, 2.815, -0.251]}
      />
    </group>
  );
}

useGLTF.preload("/Monitor.glb");
